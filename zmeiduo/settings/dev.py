# 这是我们开发阶段的配置文件
"""
Django settings for zmeiduo project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 提供用来进行拼接的一个路径   abspath=绝对路径     os.path.dirname=上一级
# os.path.abspath(__file__) = dev.py的绝对路径


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# sys.path代表的查看导包路径, 把apps文件夹添加到第1位
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'qo0$w^fv=#_#n#ga@+!)p6@jb8wjm7-s60v-)7&trvkk$n1tqd'

# SECURITY WARNING: don't run with debug turned on in production!
# 上线调试模式改False, DEBUG模式有些地方会显示两次print
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 其实可以只写 users, 但其实尽量要用下面这样注册
    'users.apps.UsersConfig',   # 用户模块
    # 只有当这个应用使用了模型,需要迁移时才必须注册
    'contents.apps.ContentsConfig', # 主页模块
    'verifications.apps.VerificationsConfig',   # 短信，图形验证码
    'oauth.apps.OauthConfig',   # QQ认证模块

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zmeiduo.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]


# jinja2和自带 两个一起
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',  # 修改1
        # 配置模版文件路径 join来配置，专业拼接路径，可以自动检查斜杠问题
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            # 补充Jinja2模板引擎环境
            'environment': 'zmeiduo.utils.jinja2_env.jinja2_environment',
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],

        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 此处模版改路径
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 项目上线后入口文件
WSGI_APPLICATION = 'zmeiduo.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # 'HOST': '192.168.126.128',  # 虚拟机 数据库主机
        # 'HOST': '192.168.83.129',  # E3V2 数据库ip
        'HOST': '127.0.0.1',  # 学校windows 数据库ip
        'PORT': 3306,  # 数据库端口
        'USER': 'sam',  # 数据库用户名
        'PASSWORD': '123',  # 数据库用户密码
        'NAME': 'meiduo',  # 数据库名字
        # 'OPTIONS': {
        #      'autocommit': True,  # 是否自动提交？
        #  },
    },
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'

# zh-hans 和 zh-Hans 有些微区别，尽量小写
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# 为True时，不管前面TIME_ZONE怎么设置都是自动选UTC
# 改成False后数据库时间会准备，但会导致locktime取时间错误，要用now()
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# 访问静态文件的url前缀
STATIC_URL = '/static/'

# 项目静态文件路径
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static_file")]  # 存放查找静态文件的目录 接收的是list

# 上传文件的路径
MEDIA_ROOT = os.path.join(BASE_DIR, "static_file/media")

# 下面是设置redis数据库，将session数据储存到redis数据库的配置
CACHES = {
    "default": {  # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {  # session
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_code": { # 验证码
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/2",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        },
}

# session配置
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 读取配置,默认是缓存到本机内存条，要改了才变
SESSION_CACHE_ALIAS = "session"

# 日志输出器配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# 指定本项目用户模型类 格式 = '应用名.模型类名'，不能用详细路径
AUTH_USER_MODEL = 'users.User'

# 重写指定Django登录认证后端
AUTHENTICATION_BACKENDS = ['users.utils.UsernameMobileAuthBackend']

# 指定登录界面的路由
LOGIN_URL = '/login/' # 改写global_settings 里的

# QQ登录配置项
QQ_CLIENT_ID = '101518219'
QQ_CLIENT_SECRET = '418d84ebdc7241efb79536886ae95224'
QQ_REDIRECT_URI = 'http://www.meiduo.site:8000/oauth_callback'



# QQ_REDIRECT_URI = 'http://127.0.0.1/oauth_callback'
# QQ_REDIRECT_URI = 'http://qqqcai.cf:8625/oauth_callback'


# 邮箱设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 指定邮件后端
EMAIL_HOST = 'smtp.126.com'  # 发邮件主机
EMAIL_PORT = 25  # 发邮件端口
EMAIL_HOST_USER = 'sumcaii@126.com'  # 授权的邮箱
EMAIL_HOST_PASSWORD = 'csj6669806'  # 邮箱授权时获得的密码，非注册登录密码
EMAIL_FROM = '好大条粉肠<sumcaii@126.com>'  # 发件人抬头